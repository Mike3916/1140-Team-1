<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.11">
  <POU Name="MAIN" Id="{4c8b3e77-e4d8-438f-9dd4-fa42d08617c7}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM MAIN
VAR
	

mCTCInSpeedSuggested : ARRAY[0..149] OF DINT;
mCTCInAuthority : ARRAY[0..149] OF DINT;
mCTCInMaintenanceMode : ARRAY[0..149] OF DINT;
mCTCInSwitchPosition : ARRAY[0..149] OF DINT;

mTrackInMaintenanceMode : ARRAY[0..149] OF DINT;
mTrackInSwitchPosition : ARRAY[0..149] OF DINT;
mTrackInOccupancy : ARRAY[0..149] OF DINT;
mTrackInCrossing : ARRAY[0..149] OF DINT;
mTrackInRightTransit : ARRAY[0..149] OF DINT;
mTrackInLeftTransit : ARRAY[0..149] OF DINT;
mTrackOutSpeedSuggested : ARRAY[0..149] OF DINT;
mTrackOutAuthority : ARRAY[0..149] OF DINT;
mOutMaintenanceMode : ARRAY[0..149] OF DINT;
mOutSwitchPosition : ARRAY[0..149] OF DINT;
mOutOccupancy : ARRAY[0..149] OF DINT;
mOutCrossing : ARRAY[0..149] OF DINT;
mOutRightTransit : ARRAY[0..149] OF DINT;
mOutLeftTransit : ARRAY[0..149] OF DINT;

mPLC2MismatchCounter : DINT :=0;
mPLC3MismatchCounter : DINT :=0;
mPLC2MismatchFlag : BOOL := 0;
mPLC3MismatchFlag : BOOL := 0;


	inc1: INT;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[FOR inc1 := 0 TO 149 DO

mCTCInSpeedSuggested[inc1] := GVL.mInFromCTC[inc1+0];
mCTCInAuthority[inc1] := GVL.mInFromCTC[inc1+150];
mCTCInMaintenanceMode[inc1] := GVL.mInFromCTC[inc1+300];
mCTCInSwitchPosition[inc1] := GVL.mInFromCTC[inc1+450];

mOutMaintenanceMode[inc1] := GVL.mInFromTrack[inc1+0];
mOutSwitchPosition[inc1] := GVL.mInFromTrack[inc1+150];
mOutOccupancy[inc1] := GVL.mInFromTrack[inc1+300];
mOutCrossing[inc1] := GVL.mInFromTrack[inc1+450];
mOutRightTransit[inc1] := GVL.mInFromTrack[inc1+600];
mOutLeftTransit[inc1] := GVL.mInFromTrack[inc1+750];

END_FOR


FOR inc1 := 0 TO 149 DO

IF GVL.mWriteEnable = 1 THEN
GVL.mOutToTrack[inc1+0] := mTrackOutSpeedSuggested[inc1];
GVL.mOutToTrack[inc1+150] := mTrackOutAuthority[inc1]; 
GVL.mOutToTrack[inc1+300] := mOutMaintenanceMode[inc1];
GVL.mOutToTrack[inc1+450] := mOutSwitchPosition[inc1] ;
GVL.mOutToTrack[inc1+600] := mOutOccupancy[inc1];
GVL.mOutToTrack[inc1+750] := mOutCrossing[inc1];
GVL.mOutToTrack[inc1+900] := mOutRightTransit[inc1];
GVL.mOutToTrack[inc1+1050] := mOutLeftTransit[inc1];

GVL.mOutToCTC[inc1+0] := mOutMaintenanceMode[inc1];
GVL.mOutToCTC[inc1+150] := mOutSwitchPosition[inc1] ;
GVL.mOutToCTC[inc1+300] := mOutOccupancy[inc1];
GVL.mOutToCTC[inc1+450] := mOutCrossing[inc1];
GVL.mOutToCTC[inc1+600] := mOutRightTransit[inc1];
GVL.mOutToCTC[inc1+750] := mOutLeftTransit[inc1];

IF GVL.mOutToTrack[inc1+0] <> GVL.mPLC2TrackWrites[inc1+0] THEN
    mPLC2MismatchFlag := mPLC2MismatchFlag OR 1;
	END_IF
IF GVL.mOutToTrack[inc1+150] <> GVL.mPLC2TrackWrites[inc1+150] THEN
    mPLC2MismatchFlag := mPLC2MismatchFlag OR 1;
	END_IF
IF GVL.mOutToTrack[inc1+300] <> GVL.mPLC2TrackWrites[inc1+300] THEN
    mPLC2MismatchFlag := mPLC2MismatchFlag OR 1;
	END_IF
IF GVL.mOutToTrack[inc1+450] <> GVL.mPLC2TrackWrites[inc1+450] THEN
    mPLC2MismatchFlag := mPLC2MismatchFlag OR 1;
	END_IF
IF GVL.mOutToTrack[inc1+600] <> GVL.mPLC2TrackWrites[inc1+600] THEN
    mPLC2MismatchFlag := mPLC2MismatchFlag OR 1;
	END_IF
IF GVL.mOutToTrack[inc1+750] <> GVL.mPLC2TrackWrites[inc1+750] THEN
    mPLC2MismatchFlag := mPLC2MismatchFlag OR 1;
	END_IF
IF GVL.mOutToTrack[inc1+900] <> GVL.mPLC2TrackWrites[inc1+900] THEN
    mPLC2MismatchFlag := mPLC2MismatchFlag OR 1;
	END_IF
IF GVL.mOutToTrack[inc1+1050] <> GVL.mPLC2TrackWrites[inc1+1050] THEN
    mPLC2MismatchFlag := mPLC2MismatchFlag OR 1;
	END_IF

IF GVL.mOutToCTC[inc1+0] <> GVL.mPLC2CTCWrites[inc1+0] THEN
    mPLC2MismatchFlag := mPLC2MismatchFlag OR 1;
	END_IF
IF GVL.mOutToCTC[inc1+150] <> GVL.mPLC2CTCWrites[inc1+150] THEN
    mPLC2MismatchFlag := mPLC2MismatchFlag OR 1;
	END_IF
IF GVL.mOutToCTC[inc1+300] <> GVL.mPLC2CTCWrites[inc1+300] THEN
    mPLC2MismatchFlag := mPLC2MismatchFlag OR 1;
	END_IF
IF GVL.mOutToCTC[inc1+450] <> GVL.mPLC2CTCWrites[inc1+450] THEN
    mPLC2MismatchFlag := mPLC2MismatchFlag OR 1;
	END_IF
IF GVL.mOutToCTC[inc1+600] <> GVL.mPLC2CTCWrites[inc1+600] THEN
    mPLC2MismatchFlag := mPLC2MismatchFlag OR 1;
	END_IF
IF GVL.mOutToCTC[inc1+750] <> GVL.mPLC2CTCWrites[inc1+750] THEN
    mPLC2MismatchFlag := mPLC2MismatchFlag OR 1;
	END_IF

IF GVL.mOutToTrack[inc1+0] <> GVL.mPLC3TrackWrites[inc1+0] THEN
    mPLC3MismatchFlag := mPLC3MismatchFlag OR 1;
	END_IF
IF GVL.mOutToTrack[inc1+150] <> GVL.mPLC3TrackWrites[inc1+150] THEN
    mPLC3MismatchFlag := mPLC3MismatchFlag OR 1;
	END_IF
IF GVL.mOutToTrack[inc1+300] <> GVL.mPLC3TrackWrites[inc1+300] THEN
    mPLC3MismatchFlag := mPLC3MismatchFlag OR 1;
	END_IF
IF GVL.mOutToTrack[inc1+450] <> GVL.mPLC3TrackWrites[inc1+450] THEN
    mPLC3MismatchFlag := mPLC3MismatchFlag OR 1;
	END_IF
IF GVL.mOutToTrack[inc1+600] <> GVL.mPLC3TrackWrites[inc1+600] THEN
    mPLC3MismatchFlag := mPLC3MismatchFlag OR 1;
	END_IF
IF GVL.mOutToTrack[inc1+750] <> GVL.mPLC3TrackWrites[inc1+750] THEN
    mPLC3MismatchFlag := mPLC3MismatchFlag OR 1;
	END_IF
IF GVL.mOutToTrack[inc1+900] <> GVL.mPLC3TrackWrites[inc1+900] THEN
    mPLC3MismatchFlag := mPLC3MismatchFlag OR 1;
	END_IF
IF GVL.mOutToTrack[inc1+1050] <> GVL.mPLC3TrackWrites[inc1+1050] THEN
    mPLC3MismatchFlag := mPLC3MismatchFlag OR 1;
	END_IF

IF GVL.mOutToCTC[inc1+0] <> GVL.mPLC3CTCWrites[inc1+0] THEN
    mPLC3MismatchFlag := mPLC3MismatchFlag OR 1;
	END_IF
IF GVL.mOutToCTC[inc1+150] <> GVL.mPLC3CTCWrites[inc1+150] THEN
    mPLC3MismatchFlag := mPLC3MismatchFlag OR 1;
	END_IF
IF GVL.mOutToCTC[inc1+300] <> GVL.mPLC3CTCWrites[inc1+300] THEN
    mPLC3MismatchFlag := mPLC3MismatchFlag OR 1;
	END_IF
IF GVL.mOutToCTC[inc1+450] <> GVL.mPLC3CTCWrites[inc1+450] THEN
    mPLC3MismatchFlag := mPLC3MismatchFlag OR 1;
	END_IF
IF GVL.mOutToCTC[inc1+600] <> GVL.mPLC2CTCWrites[inc1+600] THEN
    mPLC3MismatchFlag := mPLC3MismatchFlag OR 1;
	END_IF
IF GVL.mOutToCTC[inc1+750] <> GVL.mPLC3CTCWrites[inc1+750] THEN
    mPLC3MismatchFlag := mPLC3MismatchFlag OR 1;
	END_IF
ELSE
GVL.mOutToTrack[inc1+0] := 0;
GVL.mOutToTrack[inc1+150] := 0; 
GVL.mOutToTrack[inc1+300] := 0;
GVL.mOutToTrack[inc1+450] := 0 ;
GVL.mOutToTrack[inc1+600] := 0;
GVL.mOutToTrack[inc1+750] := 0;
GVL.mOutToTrack[inc1+900] := 0;
GVL.mOutToTrack[inc1+1050] := 0;

GVL.mOutToCTC[inc1+0] := 0;
GVL.mOutToCTC[inc1+150] := 0;
GVL.mOutToCTC[inc1+300] := 0;
GVL.mOutToCTC[inc1+450] := 0;
GVL.mOutToCTC[inc1+600] := 0;
GVL.mOutToCTC[inc1+750] := 0;
END_IF
END_FOR


(*
IF mPLC2MismatchFlag = 1 THEN
    mPLC2MismatchCounter := mPLC2MismatchCounter + 1;
ELSE
    mPLC2MismatchCounter := 0;
END_IF
IF mPLC3MismatchFlag = 1 THEN
    mPLC3MismatchCounter := mPLC3MismatchCounter + 1;
ELSE
    mPLC3MismatchCounter := 0;
END_IF


IF mPLC2MismatchCounter > 10 THEN
    mPLC2MismatchFlag := 1;
    GVL.mPLC2Failure := 1;
END_IF
IF mPLC3MismatchCounter > 10 THEN
    mPLC3MismatchFlag := 1;
    GVL.mPLC3Failure := 1;
END_IF

IF GVL.mPLC2Failure AND GVL.mPLC3Failure Then
    GVL.mWriteEnable := 0;
END_IF;
*)]]></ST>
    </Implementation>
    <LineIds Name="MAIN">
      <LineId Id="36" Count="37" />
      <LineId Id="177" Count="0" />
      <LineId Id="74" Count="1" />
      <LineId Id="178" Count="0" />
      <LineId Id="76" Count="1" />
      <LineId Id="179" Count="0" />
      <LineId Id="78" Count="1" />
      <LineId Id="180" Count="0" />
      <LineId Id="80" Count="1" />
      <LineId Id="181" Count="0" />
      <LineId Id="82" Count="1" />
      <LineId Id="182" Count="0" />
      <LineId Id="84" Count="1" />
      <LineId Id="183" Count="0" />
      <LineId Id="86" Count="1" />
      <LineId Id="184" Count="0" />
      <LineId Id="88" Count="2" />
      <LineId Id="185" Count="0" />
      <LineId Id="91" Count="1" />
      <LineId Id="186" Count="0" />
      <LineId Id="93" Count="1" />
      <LineId Id="187" Count="0" />
      <LineId Id="95" Count="1" />
      <LineId Id="188" Count="0" />
      <LineId Id="97" Count="1" />
      <LineId Id="189" Count="0" />
      <LineId Id="99" Count="1" />
      <LineId Id="190" Count="0" />
      <LineId Id="101" Count="2" />
      <LineId Id="191" Count="0" />
      <LineId Id="104" Count="1" />
      <LineId Id="192" Count="0" />
      <LineId Id="106" Count="1" />
      <LineId Id="193" Count="0" />
      <LineId Id="108" Count="1" />
      <LineId Id="194" Count="0" />
      <LineId Id="110" Count="1" />
      <LineId Id="195" Count="0" />
      <LineId Id="112" Count="1" />
      <LineId Id="196" Count="0" />
      <LineId Id="114" Count="1" />
      <LineId Id="197" Count="0" />
      <LineId Id="116" Count="1" />
      <LineId Id="198" Count="0" />
      <LineId Id="118" Count="2" />
      <LineId Id="199" Count="0" />
      <LineId Id="121" Count="1" />
      <LineId Id="200" Count="0" />
      <LineId Id="123" Count="1" />
      <LineId Id="201" Count="0" />
      <LineId Id="125" Count="1" />
      <LineId Id="202" Count="0" />
      <LineId Id="127" Count="1" />
      <LineId Id="203" Count="0" />
      <LineId Id="129" Count="1" />
      <LineId Id="204" Count="0" />
      <LineId Id="131" Count="18" />
      <LineId Id="205" Count="0" />
      <LineId Id="150" Count="24" />
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>